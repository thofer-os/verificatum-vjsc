#!/bin/sh

# Copyright 2008-2020 Douglas Wikstrom
#
# This file is part of Verificatum JavaScript Cryptographic library
# (VJSC).
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Generates an M4 file that defines a wordsize and associated
# macros. The M4 file is then used to generate the actual JavaScript
# source from the files in the source directory.
#
# Using macros in the code improves readability, but using constants
# in the code that is executed is much more efficient.

# See the makefile for these parameters.
MANTISSA=$1
WORDSIZE=$2

TWO_POW_WORDSIZE_N=`echo "2^${WORDSIZE}" | bc`
TWO_POW_WORDSIZE=`printf "0x%x" ${TWO_POW_WORDSIZE_N}`
MASK_ALL_N=`echo "2^${WORDSIZE} - 1" | bc`
MASK_ALL=`printf "0x%x" ${MASK_ALL_N}`
MASK_TOP_N=`echo "2^(${WORDSIZE} - 1)" | bc`
MASK_TOP=`printf "0x%x" ${MASK_TOP_N}`
MASK_BOT=`printf "0x1"`

HALF_WORDSIZE=`echo "${WORDSIZE} / 2" | bc`
TWO_POW_HALF_WORDSIZE_N=`echo "2^${HALF_WORDSIZE}" | bc`
TWO_POW_HALF_WORDSIZE=`printf "0x%x" ${TWO_POW_HALF_WORDSIZE_N}`
HALF_MASK_ALL_N=`echo "2^${HALF_WORDSIZE} - 1" | bc`
HALF_MASK_ALL=`printf "0x%x" ${HALF_MASK_ALL_N}`

cat << EOF
define([[[[[M4_MANTISSA]]]]],[[[[[${MANTISSA}]]]]])dnl
dnl
define([[[[[M4_WORDSIZE]]]]],[[[[[${WORDSIZE}]]]]])dnl
define([[[[[M4_TWO_POW_WORDSIZE]]]]],[[[[[${TWO_POW_WORDSIZE}]]]]])dnl
define([[[[[M4_MASK_ALL]]]]],[[[[[${MASK_ALL}]]]]])dnl
define([[[[[M4_MASK_MSB]]]]],[[[[[${MASK_TOP}]]]]])dnl
define([[[[[M4_MASK_LSB]]]]],[[[[[${MASK_BOT}]]]]])dnl
dnl
define([[[[[M4_HALF_WORDSIZE]]]]],[[[[[${HALF_WORDSIZE}]]]]])dnl
define([[[[[M4_TWO_POW_HALF_WORDSIZE]]]]],[[[[[${TWO_POW_HALF_WORDSIZE}]]]]])dnl
define([[[[[M4_HALF_MASK_ALL]]]]],[[[[[${HALF_MASK_ALL}]]]]])dnl
dnl
dnl Returns the WORDSIZE/2 lower bits of the input word.
define([[[[[M4_LOW]]]]],[[[[[(\$1 & M4_HALF_MASK_ALL)]]]]])dnl
dnl
dnl Returns the high part of the input word (may be more than half).
define([[[[[M4_HIGH]]]]],[[[[[(\$1 >>> M4_HALF_WORDSIZE)]]]]])dnl
dnl
EOF

if test ${WORDSIZE} = 30;
then
    cat << EOF
dnl Additional tweaks needed for 30-bit words.
define([[[[[M4_LSWORD_C]]]]],[[[[[(\$1 & M4_MASK_ALL)]]]]])dnl
define([[[[[M4_MSWORD_LONG_C]]]]],[[[[[ + (\$1 >>> M4_WORDSIZE)]]]]])dnl
EOF

else

    cat << EOF
dnl Additional tweaks needed for 30-bit words.
define([[[[[M4_LSWORD_C]]]]],[[[[[\$1]]]]])dnl
define([[[[[M4_MSWORD_LONG_C]]]]],[[[[[]]]]])dnl
EOF

fi
